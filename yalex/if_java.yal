(* Lexer para GramÃ¡tica No. 1 - Expresiones aritmÃ©ticas simples para variables *)

(* Introducir cualquier header aqui *)

let delim = [' ''\t''\n']
let ws = delim+
let letter = ['A'-'Z''a'-'z']
let digit = ['0'-'9']
let id = letter(letter|digit)*
let float = digit+'.'digit+
let boolean = 'true' | 'false'
let or = '||'

rule tokens = 
    ws        {return 'WS'}
    | 'if'       { return 'IF' }
    | '('        { return 'LPAREN' }
    | ')'        { return 'RPAREN' }
    | '{'        { return 'LKEY' }
    | '}'        { return 'RKEY' }
    | digit+    { return 'INTEGER' }
    | float     { return 'FLOAT' }
    | boolean { return 'BOOLEAN' }
    | '>'        { return 'GT' }
    | '<'        { return 'LT' }
    | '>='       { return 'GE' }
    | '<='       { return 'LE' }
    | '=='       { return 'EQ' }
    | '='        { return 'ASSIGN' }
    | ';'        { return 'SEMICOLON' }
    | '&&'       { return 'AND' }
    | or       { return 'OR' }
    | id        { return 'ID' }

(* Introducir cualquier trailer aqui *)